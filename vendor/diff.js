function diff_main(text1,text2){if(text1==text2)return text1?[[DIFF_EQUAL,text1]]:[];var commonlength=diff_commonPrefix(text1,text2),commonprefix=text1.substring(0,commonlength);text1=text1.substring(commonlength),text2=text2.substring(commonlength),commonlength=diff_commonSuffix(text1,text2);var commonsuffix=text1.substring(text1.length-commonlength);text1=text1.substring(0,text1.length-commonlength),text2=text2.substring(0,text2.length-commonlength);var diffs=diff_compute_(text1,text2);return commonprefix&&diffs.unshift([DIFF_EQUAL,commonprefix]),commonsuffix&&diffs.push([DIFF_EQUAL,commonsuffix]),diff_cleanupMerge(diffs),diffs}function diff_compute_(text1,text2){var diffs;if(!text1)return[[DIFF_INSERT,text2]];if(!text2)return[[DIFF_DELETE,text1]];var longtext=text1.length>text2.length?text1:text2,shorttext=text1.length>text2.length?text2:text1,i=longtext.indexOf(shorttext);if(i!=-1)return diffs=[[DIFF_INSERT,longtext.substring(0,i)],[DIFF_EQUAL,shorttext],[DIFF_INSERT,longtext.substring(i+shorttext.length)]],text1.length>text2.length&&(diffs[0][0]=diffs[2][0]=DIFF_DELETE),diffs;if(1==shorttext.length)return[[DIFF_DELETE,text1],[DIFF_INSERT,text2]];var hm=diff_halfMatch_(text1,text2);if(hm){var text1_a=hm[0],text1_b=hm[1],text2_a=hm[2],text2_b=hm[3],mid_common=hm[4],diffs_a=diff_main(text1_a,text2_a),diffs_b=diff_main(text1_b,text2_b);return diffs_a.concat([[DIFF_EQUAL,mid_common]],diffs_b)}return diff_bisect_(text1,text2)}function diff_bisect_(text1,text2){for(var text1_length=text1.length,text2_length=text2.length,max_d=Math.ceil((text1_length+text2_length)/2),v_offset=max_d,v_length=2*max_d,v1=new Array(v_length),v2=new Array(v_length),x=0;x<v_length;x++)v1[x]=-1,v2[x]=-1;v1[v_offset+1]=0,v2[v_offset+1]=0;for(var delta=text1_length-text2_length,front=delta%2!=0,k1start=0,k1end=0,k2start=0,k2end=0,d=0;d<max_d;d++){for(var k1=-d+k1start;k1<=d-k1end;k1+=2){var x1,k1_offset=v_offset+k1;x1=k1==-d||k1!=d&&v1[k1_offset-1]<v1[k1_offset+1]?v1[k1_offset+1]:v1[k1_offset-1]+1;for(var y1=x1-k1;x1<text1_length&&y1<text2_length&&text1.charAt(x1)==text2.charAt(y1);)x1++,y1++;if(v1[k1_offset]=x1,x1>text1_length)k1end+=2;else if(y1>text2_length)k1start+=2;else if(front){var k2_offset=v_offset+delta-k1;if(k2_offset>=0&&k2_offset<v_length&&v2[k2_offset]!=-1){var x2=text1_length-v2[k2_offset];if(x1>=x2)return diff_bisectSplit_(text1,text2,x1,y1)}}}for(var k2=-d+k2start;k2<=d-k2end;k2+=2){var x2,k2_offset=v_offset+k2;x2=k2==-d||k2!=d&&v2[k2_offset-1]<v2[k2_offset+1]?v2[k2_offset+1]:v2[k2_offset-1]+1;for(var y2=x2-k2;x2<text1_length&&y2<text2_length&&text1.charAt(text1_length-x2-1)==text2.charAt(text2_length-y2-1);)x2++,y2++;if(v2[k2_offset]=x2,x2>text1_length)k2end+=2;else if(y2>text2_length)k2start+=2;else if(!front){var k1_offset=v_offset+delta-k2;if(k1_offset>=0&&k1_offset<v_length&&v1[k1_offset]!=-1){var x1=v1[k1_offset],y1=v_offset+x1-k1_offset;if(x2=text1_length-x2,x1>=x2)return diff_bisectSplit_(text1,text2,x1,y1)}}}}return[[DIFF_DELETE,text1],[DIFF_INSERT,text2]]}function diff_bisectSplit_(text1,text2,x,y){var text1a=text1.substring(0,x),text2a=text2.substring(0,y),text1b=text1.substring(x),text2b=text2.substring(y),diffs=diff_main(text1a,text2a),diffsb=diff_main(text1b,text2b);return diffs.concat(diffsb)}function diff_commonPrefix(text1,text2){if(!text1||!text2||text1.charAt(0)!=text2.charAt(0))return 0;for(var pointermin=0,pointermax=Math.min(text1.length,text2.length),pointermid=pointermax,pointerstart=0;pointermin<pointermid;)text1.substring(pointerstart,pointermid)==text2.substring(pointerstart,pointermid)?(pointermin=pointermid,pointerstart=pointermin):pointermax=pointermid,pointermid=Math.floor((pointermax-pointermin)/2+pointermin);return pointermid}function diff_commonSuffix(text1,text2){if(!text1||!text2||text1.charAt(text1.length-1)!=text2.charAt(text2.length-1))return 0;for(var pointermin=0,pointermax=Math.min(text1.length,text2.length),pointermid=pointermax,pointerend=0;pointermin<pointermid;)text1.substring(text1.length-pointermid,text1.length-pointerend)==text2.substring(text2.length-pointermid,text2.length-pointerend)?(pointermin=pointermid,pointerend=pointermin):pointermax=pointermid,pointermid=Math.floor((pointermax-pointermin)/2+pointermin);return pointermid}function diff_halfMatch_(text1,text2){function diff_halfMatchI_(longtext,shorttext,i){for(var best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,seed=longtext.substring(i,i+Math.floor(longtext.length/4)),j=-1,best_common="";(j=shorttext.indexOf(seed,j+1))!=-1;){var prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j)),suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));best_common.length<suffixLength+prefixLength&&(best_common=shorttext.substring(j-suffixLength,j)+shorttext.substring(j,j+prefixLength),best_longtext_a=longtext.substring(0,i-suffixLength),best_longtext_b=longtext.substring(i+prefixLength),best_shorttext_a=shorttext.substring(0,j-suffixLength),best_shorttext_b=shorttext.substring(j+prefixLength))}return 2*best_common.length>=longtext.length?[best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common]:null}var longtext=text1.length>text2.length?text1:text2,shorttext=text1.length>text2.length?text2:text1;if(longtext.length<4||2*shorttext.length<longtext.length)return null;var hm,hm1=diff_halfMatchI_(longtext,shorttext,Math.ceil(longtext.length/4)),hm2=diff_halfMatchI_(longtext,shorttext,Math.ceil(longtext.length/2));if(!hm1&&!hm2)return null;hm=hm2?hm1&&hm1[4].length>hm2[4].length?hm1:hm2:hm1;var text1_a,text1_b,text2_a,text2_b;text1.length>text2.length?(text1_a=hm[0],text1_b=hm[1],text2_a=hm[2],text2_b=hm[3]):(text2_a=hm[0],text2_b=hm[1],text1_a=hm[2],text1_b=hm[3]);var mid_common=hm[4];return[text1_a,text1_b,text2_a,text2_b,mid_common]}function diff_cleanupMerge(diffs){diffs.push([DIFF_EQUAL,""]);for(var commonlength,pointer=0,count_delete=0,count_insert=0,text_delete="",text_insert="";pointer<diffs.length;)switch(diffs[pointer][0]){case DIFF_INSERT:count_insert++,text_insert+=diffs[pointer][1],pointer++;break;case DIFF_DELETE:count_delete++,text_delete+=diffs[pointer][1],pointer++;break;case DIFF_EQUAL:count_delete+count_insert>1?(0!==count_delete&&0!==count_insert&&(commonlength=diff_commonPrefix(text_insert,text_delete),0!==commonlength&&(pointer-count_delete-count_insert>0&&diffs[pointer-count_delete-count_insert-1][0]==DIFF_EQUAL?diffs[pointer-count_delete-count_insert-1][1]+=text_insert.substring(0,commonlength):(diffs.splice(0,0,[DIFF_EQUAL,text_insert.substring(0,commonlength)]),pointer++),text_insert=text_insert.substring(commonlength),text_delete=text_delete.substring(commonlength)),commonlength=diff_commonSuffix(text_insert,text_delete),0!==commonlength&&(diffs[pointer][1]=text_insert.substring(text_insert.length-commonlength)+diffs[pointer][1],text_insert=text_insert.substring(0,text_insert.length-commonlength),text_delete=text_delete.substring(0,text_delete.length-commonlength))),0===count_delete?diffs.splice(pointer-count_insert,count_delete+count_insert,[DIFF_INSERT,text_insert]):0===count_insert?diffs.splice(pointer-count_delete,count_delete+count_insert,[DIFF_DELETE,text_delete]):diffs.splice(pointer-count_delete-count_insert,count_delete+count_insert,[DIFF_DELETE,text_delete],[DIFF_INSERT,text_insert]),pointer=pointer-count_delete-count_insert+(count_delete?1:0)+(count_insert?1:0)+1):0!==pointer&&diffs[pointer-1][0]==DIFF_EQUAL?(diffs[pointer-1][1]+=diffs[pointer][1],diffs.splice(pointer,1)):pointer++,count_insert=0,count_delete=0,text_delete="",text_insert=""}""===diffs[diffs.length-1][1]&&diffs.pop();var changes=!1;for(pointer=1;pointer<diffs.length-1;)diffs[pointer-1][0]==DIFF_EQUAL&&diffs[pointer+1][0]==DIFF_EQUAL&&(diffs[pointer][1].substring(diffs[pointer][1].length-diffs[pointer-1][1].length)==diffs[pointer-1][1]?(diffs[pointer][1]=diffs[pointer-1][1]+diffs[pointer][1].substring(0,diffs[pointer][1].length-diffs[pointer-1][1].length),diffs[pointer+1][1]=diffs[pointer-1][1]+diffs[pointer+1][1],diffs.splice(pointer-1,1),changes=!0):diffs[pointer][1].substring(0,diffs[pointer+1][1].length)==diffs[pointer+1][1]&&(diffs[pointer-1][1]+=diffs[pointer+1][1],diffs[pointer][1]=diffs[pointer][1].substring(diffs[pointer+1][1].length)+diffs[pointer+1][1],diffs.splice(pointer+1,1),changes=!0)),pointer++;changes&&diff_cleanupMerge(diffs)}var DIFF_DELETE=-1,DIFF_INSERT=1,DIFF_EQUAL=0;